@inherits LayoutComponentBase
@inject IJSRuntime js
@implements IAsyncDisposable


<PageTitle>Main Title</PageTitle>

<CascadingValue Value="@Playlists">
    <div class="page">

        <div class="page-area">
            <div @ref=Sidebar class="sidebar-area">
                <div class="menu-area">
                    <Menu></Menu>
                </div>

                <div @ref=FavouritesPanel class="favorites-area">
                    @if (Playlists is not null)
                    {
                        for (int i = 0; i < 10; i++)
                        {
                            @foreach (var pl in Playlists)
                            {
                                <SidePlaylist Playlist="pl"></SidePlaylist>
                            }
                        }
                    }
                </div>
            </div>

            <div @ref=Resizer class="resizer"></div>

            <div @ref=MainPanel class="main-area">
                @Body
            </div>

        </div>

        <div class="trackbar-area">
        </div>
    </div>
</CascadingValue>

@code
{
    IJSObjectReference? jsModule;
    List<TrackModel>? Tracks { get; set; }
    public List<PlaylistModel>? Playlists { get; set; }

    ElementReference Resizer;
    ElementReference Sidebar;
    ElementReference FavouritesPanel;
    ElementReference MainPanel;

    protected override async Task OnInitializedAsync()
    {
        Tracks = DataBaseMoq.Tracks;
        Playlists = DataBaseMoq.Playlists;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await js.InvokeAsync<IJSObjectReference>("import", "./Shared/MainLayout.razor.js");
            await jsModule.InvokeVoidAsync("Main.ResizeInit", Resizer, Sidebar, FavouritesPanel);
            await jsModule.InvokeVoidAsync("Main.LoadNextInit", DotNetObjectReference.Create(this), MainPanel);
        }
    }

    [JSInvokable]
    public async Task LoadNext()
    {
        Playlists.Add(new PlaylistModel()
            {
                Author = "Author",
                Id = Guid.NewGuid(),
                Image = Playlists[0].Image,
                Title = "Title"
            });
        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }
}
