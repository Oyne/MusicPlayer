@inherits LayoutComponentBase
@implements IAsyncDisposable
@inject IJSRuntime js
@inject IPlayerService playerService

<PageTitle>Main Title</PageTitle>

<CascadingValue Value="@CurrentPlayingTrackId" Name="Track">
    <CascadingValue Value="@CurrentPlayingCollectionId" Name="Collection">
        <CascadingValue Value="@IsPaused" Name="IsPaused">
            <div class="page">
                <div class="page-area">
                    <div @ref=Sidebar class="sidebar-area">
                        <div class="menu-area">
                            <Menu></Menu>
                        </div>

                        <div @ref=FavouritesPanel class="favorites-area">
                            @if (Playlists is not null)
                            {
                                @foreach (var pl in Playlists)
                                {
                                    <SidePlaylist Playlist="pl"></SidePlaylist>
                                }
                            }
                        </div>
                    </div>

                    <div @ref=Resizer class="resizer"></div>

                    <div class="main-area">
                        <Topbar></Topbar>
                        @Body
                    </div>

                </div>

                <div class="trackbar-area">
                    <Trackbar></Trackbar>
                </div>
            </div>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code
{
    IJSObjectReference? jsModule;
    public List<PlaylistModel>? Playlists { get; set; }

    public Guid CurrentPlayingTrackId { get; set; }

    public Guid CurrentPlayingCollectionId { get; set; }

    public bool IsPaused { get; set; }

    ElementReference Resizer;
    ElementReference Sidebar;
    ElementReference FavouritesPanel;

    protected override async Task OnInitializedAsync()
    {
        using (PlayerContext db = new PlayerContext())
        {
            Playlists = await db.Playlists.ToListAsync();
        }

        playerService.TrackChanged += OnTrackChanged;
        playerService.TrackPaused += OnTrackPaused;
        playerService.TrackPlaying += OnTrackPlaying;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await js.InvokeAsync<IJSObjectReference>("import", "./Shared/MainLayout.razor.js");
            await jsModule.InvokeVoidAsync("Main.ResizeInit", Resizer, Sidebar, FavouritesPanel);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }

    public void OnTrackChanged(object sender, PlayPauseTrackEventArgs e)
    {
        CurrentPlayingCollectionId = e.TrackCollection.Id;
        CurrentPlayingTrackId = e.TrackId;
        IsPaused = false;
    }

    public void OnTrackPaused(object sender, PlayPauseTrackEventArgs e)
    {
        IsPaused = true;
    }

    public void OnTrackPlaying(object sender, PlayPauseTrackEventArgs e)
    {
        IsPaused = false;
    }
}
