@inject IJSRuntime js
@implements IAsyncDisposable

<div class="trackbar">
    <div class="track-area">
        <div class="track-image">
            <img src="@Track.Image" />
        </div>
        <div @ref=Info class="track-info">
            <div class="track-title">
                <div @ref=Title class="track-title-area">
                    @*<a href="#">Very Very Very Very Very Very Very Very Very V... Long tetle</a>*@
                    <a href="#">Very Very Very Very Very Very Very Long Title</a>
                </div>
            </div>
            <div class="track-author">
                <div @ref=Author class="track-author-area">
                    @*<a href="#">Very Very Very Very Very Very Very Very Very Vei.... Very Long Author</a>*@
                    <a href="#">Very Very Very Very Very Very Very Very Very Very Very Very Long Author</a>
                </div>
            </div>
        </div>
        <div class="track-heart">
            <button class="heart-button button" type="button">
                <i class="ph-fill ph-heart-straight"></i>
            </button>
        </div>
    </div>
    @*@Track.Source*@
    <div class="controls-area">
        <audio @ref=Audio src="@Track.Source" loop></audio>
        <div class="buttons-area">
            <div class="buttons-left-area">
                <button class="shuffle-button button">
                    <i class="ph-bold ph-shuffle"></i>
                </button>
                <button @ref=BackwardButton class="previous-button button">
                    <i class="fa-solid fa-backward-step"></i>
                </button>
            </div>

            <button @ref=PlayButton class="playpause-button button">
                <i class="fa-solid fa-circle-play"></i>
                @*<i class="fa-solid fa-circle-pause"></i>*@
            </button>

            <div class="buttons-right-area">
                <button @ref=ForwardButton class="next-button  button">
                    <i class="fa-solid fa-forward-step"></i>
                </button>
                <button class="repeat-button button">
                    <i class="ph-bold ph-repeat"></i>
                </button>
            </div>
        </div>
        <div class="slider-area">
            <div @ref=CurrentTime class="current-time">
                -:--
            </div>
            <div class="slider-container">
                <input @ref=Slider type="range" class="slider">
            </div>
            <div @ref=DurationTime class="duration-time">
                -:--
            </div>
        </div>
    </div>

    <div class="other-area">
        <button class="button">
            <i class="ph ph-film-script"></i>
        </button>

        <button class="button">
            <i class="ph ph-microphone-stage"></i>
        </button>

        <button class="button">
            <i class="ph-fill ph-queue"></i>
        </button>

        <button class="button">
            <i class="ph ph-desktop-tower"></i>
            @*<i class="ph-bold ph-devices"></i>*@
        </button>

        <div @ref=VolumeContainer class="volume-slider-area">
            <button @ref=VolumeButton class="button">
                <i class="ph ph-speaker-high"></i>
            </button>
            <div @ref=VolumeSlider class="volume-slider-container">
                <div @ref=VolumeOuter class="outer">
                    <div @ref=VolumeInner class="inner">
                    </div>
                </div>
                <div @ref=VolumeCircle class="circle"></div>
            </div>
        </div>

        <button class="button">
            <i class="ph-fill ph-picture-in-picture"></i>
        </button>

    </div>
</div>

@code {
    IJSObjectReference? jsModule;
    ElementReference Title;
    ElementReference Author;
    ElementReference Info;

    ElementReference Slider;
    ElementReference Audio;
    ElementReference CurrentTime;
    ElementReference DurationTime;
    ElementReference PlayButton;
    ElementReference BackwardButton;
    ElementReference ForwardButton;

    ElementReference VolumeSlider;
    ElementReference VolumeOuter;
    ElementReference VolumeInner;
    ElementReference VolumeCircle;
    ElementReference VolumeButton;
    ElementReference VolumeContainer;

    [Parameter]
    public TrackModel Track { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Track = DataBaseMoq.Tracks[2];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await js.InvokeAsync<IJSObjectReference>("import", "./Shared/Trackbar.razor.js");
            await jsModule.InvokeVoidAsync("Trackbar.TrackInfoInit", Info, Title, Author);
            await jsModule.InvokeVoidAsync("Trackbar.SliderInit", Slider);
            await jsModule.InvokeVoidAsync("Trackbar.AudioInit", Audio, Slider, PlayButton, CurrentTime, DurationTime, VolumeSlider, VolumeButton, VolumeContainer, BackwardButton);
            await jsModule.InvokeVoidAsync("Trackbar.VolumeSliderInit", VolumeSlider, VolumeOuter, VolumeInner, VolumeCircle);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }
}
