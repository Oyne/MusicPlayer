@inject IJSRuntime js
@implements IAsyncDisposable
@inject IPlayerService playerService;

<div class="trackbar">
    <div class="track-area">
        <div class="track-image">
            @if (Track is not null)
            {
                @if (!String.IsNullOrEmpty(Image))
                {
                    <img src="data:image/png;base64,@Image" />
                }
                else
                {
                    <img src="data:image/png;base64,@AlbumCovers.DefaultCover" />
                }
            }
        </div>
        <div @ref=Info class="track-info">
            <div class="track-title">
                <div @ref=TitleElement class="track-title-area">
                    <a href="#">@Title</a>
                </div>
            </div>
            <div class="track-author">
                <div @ref=AuthorElement class="track-author-area">
                    <a href="#">@Artist</a>
                </div>
            </div>
        </div>
        <div class="track-heart">
            <button class="heart-button button" type="button">
                @if (Track is not null)
                {
                    <i class="ph-fill ph-heart-straight"></i>
                }
            </button>
        </div>
    </div>
    <div class="controls-area">
        <audio @ref=Audio src="@Track?.Source"></audio>
        <div class="buttons-area">
            <div class="buttons-left-area">
                <button class="shuffle-button button">
                    <i class="ph-bold ph-shuffle"></i>
                </button>
                <button @ref=BackwardButton class="previous-button button">
                    <i class="fa-solid fa-backward-step @(Track is null ? "inactive" : "")"></i>
                </button>
            </div>

            <button @ref=PlayButton class="playpause-button button @(Track is null ? "inactive" : "")">
                @if (Track is not null)
                {
                    <i class="fa-solid fa-circle-play"></i>
                }
                else
                {
                    <i class="fa-solid fa-circle-pause"></i>
                }
            </button>

            <div class="buttons-right-area">
                <button @ref=ForwardButton class="next-button button" @onclick="@PlayNext">
                    <i class="fa-solid fa-forward-step @(Track is null ? "inactive" : "")"></i>
                </button>
                <button class="repeat-button button">
                    <i class="ph-bold ph-repeat"></i>
                </button>
            </div>
        </div>
        <div class="slider-area">
            <div @ref=CurrentTime class="current-time">
                -:--
            </div>
            <div class="slider-container">
                <input @ref=Slider type="range" class="slider">
            </div>
            <div @ref=DurationTime class="duration-time">
                -:--
            </div>
        </div>
    </div>

    <div class="other-area">
        <button class="button">
            <i class="ph ph-film-script"></i>
        </button>

        <button class="button">
            <i class="ph ph-microphone-stage"></i>
        </button>

        <button class="button">
            <i class="ph-fill ph-queue"></i>
        </button>

        <button class="button">
            <i class="ph ph-desktop-tower"></i>
            @*<i class="ph-bold ph-devices"></i>*@
        </button>

        <div @ref=VolumeContainer class="volume-slider-area">
            <button @ref=VolumeButton class="button">
                <i class="ph ph-speaker-high"></i>
            </button>
            <div @ref=VolumeSlider class="volume-slider-container">
                <div @ref=VolumeOuter class="outer">
                    <div @ref=VolumeInner class="inner">
                    </div>
                </div>
                <div @ref=VolumeCircle class="circle"></div>
            </div>
        </div>

        <button class="button">
            <i class="ph-fill ph-picture-in-picture"></i>
        </button>

    </div>
</div>

@code {
    IJSObjectReference? jsModule;

    ElementReference TitleElement;
    ElementReference AuthorElement;
    ElementReference Info;

    ElementReference Slider;
    ElementReference Audio;
    ElementReference CurrentTime;
    ElementReference DurationTime;
    ElementReference PlayButton;
    ElementReference BackwardButton;
    ElementReference ForwardButton;

    ElementReference VolumeSlider;
    ElementReference VolumeOuter;
    ElementReference VolumeInner;
    ElementReference VolumeCircle;
    ElementReference VolumeButton;
    ElementReference VolumeContainer;

    [Parameter]
    public EventCallback<Guid> OnTrackPlayStateChangedCallback { get; set; }

    [Parameter]
    public int TrackIndex { get; set; } = -1;

    public ITrackStorable? TrackCollection { get; set; }

    public List<TrackModel> Tracks { get; set; } = new();

    TrackModel? Track { get; set; }

    string? Image { get; set; }

    string? Title { get; set; }

    string? Artist { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(Tracks);

        if (Tracks.Count > 0 && TrackIndex >= 0 && TrackIndex < Tracks.Count)
        {
            Track = Tracks[TrackIndex];
        }

        playerService.StartPlayingTrack += StartPlayingTrack;
        playerService.PlayTrack += PlayTrack;
        playerService.PauseTrack += PauseTrack;

        // if (Track is not null)
        // {
        //     using (var db = new PlayerContext())
        //     {
        //         Track = db.Tracks.Include(t => t.Album)
        //                  .ThenInclude(a => a.Artist)
        //                  .FirstOrDefault(t => t.Id == Track.Id);

        //     }
        // }

        // using (var db = new PlayerContext())
        // {
        //     Track = db.Tracks.Include(t => t.Album)
        //              .ThenInclude(a => a.Artist)
        //              .FirstOrDefault();

        // }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await js.InvokeAsync<IJSObjectReference>("import", "./Shared/Trackbar.razor.js");
            await jsModule.InvokeVoidAsync("Trackbar.TrackInfoInit", Info, TitleElement, AuthorElement);
            await jsModule.InvokeVoidAsync("Trackbar.SliderInit", Slider);
            await jsModule.InvokeVoidAsync("Trackbar.VolumeSliderInit", VolumeSlider, VolumeOuter, VolumeInner, VolumeCircle);
            await jsModule.InvokeVoidAsync("Trackbar.VolumeInit", Audio, VolumeSlider, VolumeButton, VolumeContainer);
            await jsModule.InvokeVoidAsync("Trackbar.AudioInit", DotNetObjectReference.Create(this), Audio, Slider, PlayButton, CurrentTime, DurationTime, BackwardButton);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }

    private async Task StartPlayingTrack(object sender, PlayEventArgs e)
    {
        TrackCollection = e.TrackCollection;
        TrackIndex = e.TrackIndex;
        InitializeTrackList();

        if (TrackIndex >= 0 && TrackIndex < Tracks.Count)
        {
            await InitializeTrackAsync(Tracks[TrackIndex].Id);
        }

        StateHasChanged();
    }

    public async Task PauseTrack(object sender, PlayEventArgs e)
    {
        if (jsModule is not null)
        {
            await jsModule.InvokeVoidAsync("Trackbar.Pause", Audio);
        }
    }

    public async Task PlayTrack(object sender, PlayEventArgs e)
    {
        if (jsModule is not null)
        {
            await jsModule.InvokeVoidAsync("Trackbar.Play", Audio);
        }
    }

    [JSInvokable]
    public async Task PlayNext()
    {
        if (TrackIndex < 0 || TrackIndex + 1 >= Tracks.Count)
        {
            return;
        }

        await InitializeTrackAsync(Tracks[++TrackIndex].Id);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task PlayPrevious()
    {
        if (TrackIndex - 1 < 0 || TrackIndex >= Tracks.Count)
        {
            return;
        }

        await InitializeTrackAsync(Tracks[--TrackIndex].Id);
        StateHasChanged();
    }

    private async Task InitializeTrackAsync(Guid id)
    {
        using (var db = new PlayerContext())
        {
            Track = await db.Tracks
                 .Include(t => t.Album)
                     .ThenInclude(a => a.Artist)
                 .FirstOrDefaultAsync(t => t.Id == id);

            if (Track is not null)
            {
                Image = Track.Album.Image;
                Title = Track.Title;
                Artist = Track.Album.Artist.Name;
                await OnTrackPlayStateChangedCallback.InvokeAsync(Track.Id);
            }
            else
            {
                await OnTrackPlayStateChangedCallback.InvokeAsync(Guid.Empty);
            }
        }
    }

    private void InitializeTrackList()
    {
        if (TrackCollection is not null)
        {

            if (TrackCollection.Type == TrackCollectionType.Album)
            {
                InitializeAlbum();
            }
            else if (TrackCollection.Type == TrackCollectionType.Playlist)
            {
                InitializePlaylist();
            }
        }
    }

    private void InitializeAlbum()
    {
        if (TrackCollection is not null)
        {
            using (var db = new PlayerContext())
            {
                TrackCollection = db.Albums
                                       .Include(a => a.Artist)
                                       .Include(a => a.Tracks)
                                       .FirstOrDefault(a => a.Id == TrackCollection.Id);

                if (TrackCollection is not null)
                {
                    Tracks = ((AlbumModel)TrackCollection).Tracks;
                    Artist = ((AlbumModel)TrackCollection).Artist.Name;
                }
            }
        }
    }

    private void InitializePlaylist()
    {
        if (TrackCollection is not null)
        {
            using (var db = new PlayerContext())
            {
                TrackCollection = db.Playlists
                                .Include(p => p.User)
                                .Include(p => p.PlaylistTrack)
                                    .ThenInclude(pt => pt.Track)
                                .FirstOrDefault(p => p.Id == TrackCollection.Id);

                if (TrackCollection is not null)
                {
                    Tracks = (from t in db.Tracks
                              from pt in db.PlaylistTracks
                              where t.Id == pt.TrackId
                              where pt.PlaylistId == TrackCollection.Id
                              select t).ToList();

                    Artist = ((PlaylistModel)TrackCollection).User.Name;
                }
                else
                {
                    Tracks = new List<TrackModel>();
                }
            }

        }
    }
}
