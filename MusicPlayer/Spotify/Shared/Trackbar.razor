@inject IJSRuntime js
@implements IAsyncDisposable
@inject IPlayerService playerService;

<div class="trackbar">
    <div class="track-area">
        <div class="track-image">
            @if (Track is not null)
            {
                @if (!String.IsNullOrEmpty(Image))
                {
                    <img src="data:image/png;base64,@Image" />
                }
                else
                {
                    <img src="data:image/png;base64,@AlbumCovers.DefaultCover" />
                }
            }
        </div>
        <div @ref=Info class="track-info">
            <div class="track-title">
                <div @ref=TitleElement class="track-title-area">
                    <a href="#">@Title</a>
                </div>
            </div>
            <div class="track-author">
                <div @ref=AuthorElement class="track-author-area">
                    <a href="#">@Artist</a>
                </div>
            </div>
        </div>
        <div class="track-heart">
            <button class="heart-button button" type="button">
                @if (Track is not null)
                {
                    <i class="ph-fill ph-heart-straight"></i>
                }
            </button>
        </div>
    </div>
    <div class="controls-area">
        <audio @ref=Audio src="@Track?.Source"></audio>
        <div class="buttons-area">
            <div class="buttons-left-area">
                <button class="shuffle-button button" @onclick="@(IsShuffle ? TurnShuffleOff : TurnShuffleOn)">
                    <i class="ph-bold ph-shuffle @(IsShuffle ? "shuffle-on" : "")"></i>
                </button>
                <button @ref=BackwardButton class="previous-button button" @onclick="@PlayPrevious">
                    <i class="fa-solid fa-backward-step @(Track is null ? "inactive" : "")"></i>
                </button>
            </div>

            <button @ref=PlayButton class="playpause-button button @(Track is null ? "inactive" : "")">
                <i class="fa-solid @(IsPlaying ? "fa-circle-pause" : "fa-circle-play")
                                   @(Track is null ? "inactive" : "")"></i>
            </button>

            <div class="buttons-right-area">
                <button @ref=ForwardButton class="next-button button" @onclick="@PlayNext">
                    <i class="fa-solid fa-forward-step @(Track is null ? "inactive" : "")"></i>
                </button>
                <button class="repeat-button button" @onclick="@SwitchRepeat">
                    <i class="ph-bold
                            @(Repeat == RepeatMode.RepeatOnce ? "ph-repeat-once" : "ph-repeat")
                            @(Repeat != RepeatMode.None ? "repeat-on" : "")">
                    </i>
                </button>
            </div>
        </div>
        <div class="slider-area">
            <div @ref=CurrentTime class="current-time">
                -:--
            </div>
            <div class="slider-container">
                <input @ref=Slider type="range" class="slider">
            </div>
            <div @ref=DurationTime class="duration-time">
                -:--
            </div>
        </div>
    </div>

    <div class="other-area">
        <button class="button">
            <i class="ph ph-film-script"></i>
        </button>

        <button class="button">
            <i class="ph ph-microphone-stage"></i>
        </button>

        <button class="button">
            <i class="ph-fill ph-queue"></i>
        </button>

        <button class="button">
            <i class="ph ph-desktop-tower"></i>
            @*<i class="ph-bold ph-devices"></i>*@
        </button>

        <div @ref=VolumeContainer class="volume-slider-area">
            <button @ref=VolumeButton class="button">
                <i class="ph ph-speaker-high"></i>
            </button>
            <div @ref=VolumeSlider class="volume-slider-container">
                <div @ref=VolumeOuter class="outer">
                    <div @ref=VolumeInner class="inner">
                    </div>
                </div>
                <div @ref=VolumeCircle class="circle"></div>
            </div>
        </div>

        <button class="button">
            <i class="ph-fill ph-picture-in-picture"></i>
        </button>

    </div>
</div>

@code {
    IJSObjectReference? jsModule;

    ElementReference TitleElement;
    ElementReference AuthorElement;
    ElementReference Info;

    ElementReference Slider;
    ElementReference Audio;
    ElementReference CurrentTime;
    ElementReference DurationTime;
    ElementReference PlayButton;
    ElementReference BackwardButton;
    ElementReference ForwardButton;

    ElementReference VolumeSlider;
    ElementReference VolumeOuter;
    ElementReference VolumeInner;
    ElementReference VolumeCircle;
    ElementReference VolumeButton;
    ElementReference VolumeContainer;

    [Parameter]
    public int TrackIndex { get; set; } = -1;

    public ITrackStorable? TrackCollection { get; set; }

    public List<TrackModel> Tracks { get; set; } = new();

    TrackModel? Track { get; set; }

    string? Image { get; set; }

    string? Title { get; set; }

    string? Artist { get; set; }

    bool IsShuffle { get; set; }

    RepeatMode Repeat { get; set; }

    bool IsPlaying { get; set; }

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(Tracks);

        if (Tracks.Count > 0 && TrackIndex >= 0 && TrackIndex < Tracks.Count)
        {
            Track = Tracks[TrackIndex];
        }

        playerService.StartTrack += OnStartTrack;
        playerService.StartCollection += OnStartCollcetion;
        playerService.PauseTrack += OnPauseTrack;
        playerService.PlayTrack += OnPlayTrack;
        playerService.PlayStateChanged += OnPlayStateChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await js.InvokeAsync<IJSObjectReference>("import", "./Shared/Trackbar.razor.js");
            await jsModule.InvokeVoidAsync("Trackbar.TrackInfoInit", Info, TitleElement, AuthorElement);
            await jsModule.InvokeVoidAsync("Trackbar.SliderInit", Slider);
            await jsModule.InvokeVoidAsync("Trackbar.VolumeSliderInit", VolumeSlider, VolumeOuter, VolumeInner, VolumeCircle);
            await jsModule.InvokeVoidAsync("Trackbar.VolumeInit", Audio, VolumeSlider, VolumeButton, VolumeContainer);
            await jsModule.InvokeVoidAsync("Trackbar.AudioInit", DotNetObjectReference.Create(this), Audio, Slider, PlayButton, CurrentTime, DurationTime, BackwardButton);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }

        playerService.StartTrack -= OnStartTrack;
        playerService.StartCollection -= OnStartCollcetion;
        playerService.PauseTrack -= OnPauseTrack;
        playerService.PlayTrack -= OnPlayTrack;
        playerService.PlayStateChanged -= OnPlayStateChanged;
    }

    private async Task OnStartCollcetion(object sender, StartCollectionEventArgs e)
    {
        // if collection is not valid do nothing
        if (!IsCollectionValid(e.TrackCollection))
        {
            return;
        }

        // if collection is the same just continue playing
        if (TrackCollection?.Id == e.TrackCollection.Id)
        {
            if (jsModule is not null)
            {
                await jsModule.InvokeVoidAsync("Trackbar.Play", Audio);
            }
        }
        else
        {
            // if collection changed and repeat mode is Repeat Once
            // change it to repeat mode Repeat
            if (Repeat == RepeatMode.RepeatOnce)
            {
                Repeat = RepeatMode.Repeat;
            }

            // initialize new collection
            TrackCollection = e.TrackCollection;
            InitializeTrackList();

            // get track index depending of collection tracklist and shuffle mode
            TrackIndex = GetInitialTrackIndex();

            // if shuffle mode is On when starting playing tracklist
            // shuffle the tracklist and put current track on the first place
            if (IsShuffle && Tracks.Count > 1)
            {
                Tracks.ShuffleAndSetFirst(TrackIndex);
                TrackIndex = 0;
            }

            // if TrackIndex is correct initialize track by its index in the tracklist
            if (TrackIndex >= 0 && TrackIndex < Tracks.Count)
            {
                InitializeTrack(Tracks[TrackIndex].Id);
            }

            StateHasChanged();

            if (jsModule is not null)
            {
                await jsModule.InvokeVoidAsync("Trackbar.Start", Audio);
            }
        }
    }

    private async Task OnStartTrack(object sender, StartTrackEventArgs e)
    {
        // if track and collection are the same just continue playing
        if (Track?.Id == e.TrackId && TrackCollection?.Id == e.TrackCollection.Id)
        {
            if (jsModule is not null)
            {
                await jsModule.InvokeVoidAsync("Trackbar.Play", Audio);
            }
        }
        else
        {
            // if track or collection changed and repeat mode is Repeat Once
            // change it to repeat mode Repeat
            if (Repeat == RepeatMode.RepeatOnce)
            {
                Repeat = RepeatMode.Repeat;
            }

            // if collection changed then initialize new tracklist
            if (TrackCollection is null || TrackCollection.Id != e.TrackCollection.Id)
            {
                TrackCollection = e.TrackCollection;
                InitializeTrackList();
            }

            // get track index depending of collection tracklist and shuffle mode
            TrackIndex = GetTrackIndexById(e.TrackId);

            // if shuffle mode is On when starting playing tracklist
            // shuffle the tracklist and put current track on the first place
            if (IsShuffle && Tracks.Count > 1)
            {
                Tracks.ShuffleAndSetFirst(TrackIndex);
                TrackIndex = 0;
            }

            // if track changed and TrackIndex is correct then initialize new track
            if (Track is null || Track.Id != e.TrackId)
            {
                if (TrackIndex >= 0 && TrackIndex < Tracks.Count)
                {
                    InitializeTrack(Tracks[TrackIndex].Id);

                }
            }

            StateHasChanged();

            if (jsModule is not null)
            {
                await jsModule.InvokeVoidAsync("Trackbar.Start", Audio);
            }
        }
    }

    private void OnPauseTrack(object? sender, EventArgs e)
    {
        Pause();
    }

    private void OnPlayTrack(object? sender, EventArgs e)
    {
        Play();
    }

    public void OnPlayStateChanged(object? sender, PlayStateChangedEventArgs e)
    {
        IsPlaying = e.IsPaused ? false : true;
        StateHasChanged();
    }

    private void Pause()
    {
        if (jsModule is not null)
        {
            jsModule.InvokeVoidAsync("Trackbar.Pause", Audio);
        }
    }

    private void Play()
    {
        if (jsModule is not null)
        {
            jsModule.InvokeVoidAsync("Trackbar.Play", Audio);
        }
    }

    private void Start()
    {
        if (jsModule is not null)
        {
            jsModule.InvokeVoidAsync("Trackbar.Start", Audio);
        }
    }

    private async Task SetStartTrack()
    {
        if (Tracks.Count > 0)
        {
            TrackIndex = 0;
            InitializeTrack(Tracks[TrackIndex].Id);
            StateHasChanged();
            if (jsModule is not null)
            {
                await jsModule.InvokeVoidAsync("Trackbar.SetStartTrack", Audio);
            }
        }
    }

    [JSInvokable]
    public void Playing()
    {
        if (TrackCollection is not null && Track is not null)
        {
            playerService.Playing(TrackCollection, Track.Id);
        }
    }

    [JSInvokable]
    public void Paused()
    {
        if (TrackCollection is not null && Track is not null)
        {
            playerService.Paused(TrackCollection, Track.Id);
        }
    }

    [JSInvokable]
    public void TrackChanged()
    {
        if (TrackCollection is not null && Track is not null)
        {
            playerService.Changed(TrackCollection.Id, Track.Id);
        }
    }

    [JSInvokable]
    public async Task PlayNextWhenEnded()
    {
        if (TrackIndex < 0)
        {
            return;
        }

        // if TrackIndex is last index and repeat mode is None
        // set the starting track of the tracklist and pause it
        if (TrackIndex == Tracks.Count - 1 && Repeat == RepeatMode.None)
        {
            await SetStartTrack();
            return;
        }
        // else if TrackIndex is last index but repeat mode is Repeat
        // set TrackIndex to 0 and start playing track
        else if (TrackIndex == Tracks.Count - 1 && Repeat == RepeatMode.Repeat)
        {
            TrackIndex = 0;
            InitializeTrack(Tracks[TrackIndex].Id);
        }
        // else if repeat mode is not RepeatOnce
        // increment TrackIndex by 1 and start playing track
        else if (Repeat != RepeatMode.RepeatOnce)
        {
            InitializeTrack(Tracks[++TrackIndex].Id);
        }

        // start playing track
        if (jsModule is not null)
        {
            await jsModule.InvokeVoidAsync("Trackbar.Start", Audio);
        }

        StateHasChanged();
    }

    [JSInvokable]
    public void PlayPreviousIfNotFirst()
    {
        if (TrackIndex - 1 < 0 || TrackIndex >= Tracks.Count)
        {
            return;
        }

        InitializeTrack(Tracks[--TrackIndex].Id);
        StateHasChanged();
    }

    public async Task PlayNext()
    {
        // if Repeat Once mode is on and Play Next button clicked change the repeat mode to Repeat
        if (Repeat == RepeatMode.RepeatOnce)
        {
            Repeat = RepeatMode.Repeat;
        }

        await PlayNextWhenEnded();
    }

    public async Task PlayPrevious()
    {
        if (TrackIndex >= Tracks.Count)
        {
            return;
        }

        if (TrackIndex == 0 && Tracks.Count > 0)
        {
            if (jsModule is not null)
            {
                await jsModule.InvokeVoidAsync("Trackbar.SetTrackToStart", Audio, Slider, CurrentTime);
            }
        }
        else
        {
            if (jsModule is not null)
            {
                await jsModule.InvokeVoidAsync("Trackbar.PlayPrevious", DotNetObjectReference.Create(this), Audio, Slider, CurrentTime);
            }
        }
    }

    private void InitializeTrack(Guid id)
    {
        using (var db = new PlayerContext())
        {
            Track = db.Tracks
                 .Include(t => t.Album)
                     .ThenInclude(a => a.Artist)
                 .FirstOrDefault(t => t.Id == id);

            if (Track is not null)
            {
                Image = Track.Album.Image;
                Title = Track.Title;
                Artist = Track.Album.Artist.Name;
            }
        }
    }

    private void InitializeTrackList()
    {
        if (TrackCollection is not null)
        {
            if (TrackCollection.Type == TrackCollectionType.Album)
            {
                InitializeAlbum();
            }
            else if (TrackCollection.Type == TrackCollectionType.Playlist)
            {
                InitializePlaylist();
            }
        }
    }

    private void InitializeAlbum()
    {
        if (TrackCollection is not null)
        {
            using (var db = new PlayerContext())
            {
                var collection = db.Albums
                                       .Include(a => a.Artist)
                                       .Include(a => a.Tracks)
                                       .FirstOrDefault(a => a.Id == TrackCollection.Id);

                if (collection is not null)
                {
                    Tracks = ((AlbumModel)collection).Tracks;
                }
                else
                {
                    Tracks = new List<TrackModel>();
                }
            }
        }
    }

    private void InitializePlaylist()
    {
        if (TrackCollection is not null)
        {
            using (var db = new PlayerContext())
            {
                var collection = db.Playlists
                                        .Include(p => p.User)
                                        .Include(p => p.PlaylistTrack)
                                        .ThenInclude(pt => pt.Track)
                                        .FirstOrDefault(p => p.Id == TrackCollection.Id);

                if (collection is not null)
                {
                    Tracks = (from t in db.Tracks
                              from pt in db.PlaylistTracks
                              where t.Id == pt.TrackId
                              where pt.PlaylistId == TrackCollection.Id
                              select t).ToList();
                }
                else
                {
                    Tracks = new List<TrackModel>();
                }
            }

        }
    }

    private void TurnShuffleOn()
    {
        IsShuffle = true;
        if (Tracks.Count > 1 && TrackIndex >= 0 && TrackIndex < Tracks.Count)
        {
            // shuffle tracklist and place current track on the first place
            Tracks.ShuffleAndSetFirst(TrackIndex);
            TrackIndex = 0;
        }
    }

    private void TurnShuffleOff()
    {
        IsShuffle = false;
        // get the initial tracklist order
        InitializeTrackList();
        // get index of current track in the tracklist
        if (Track is not null)
        {
            TrackIndex = GetTrackIndexById(Track.Id);
        }
    }

    /// <summary>
    /// Gets an index of track in tracklist depending on the shuffle mode and count of tracks in the tracklist.
    /// </summary>
    /// <returns>
    /// 0 if tracks count greater than 0
    /// -1 if tracks count is 0;
    /// random index if tracks count greater than 1 and shuffle mode is on.
    /// </returns>
    private int GetInitialTrackIndex()
    {
        if (Tracks.Count > 0)
        {
            if (IsShuffle && Tracks.Count > 1)
            {
                Random r = new();
                return r.Next(Tracks.Count);
            }
            else
            {
                return 0;
            }

        }
        else
        {
            return -1;
        }
    }

    /// <summary>
    /// Gets an index of track in the tracklist by its id.
    /// </summary>
    /// <param name="trackId"> Id of track which index it needs to find in a collection. </param>
    /// <returns>
    /// Non negative number if track exists in the tracklist, otherwise -1.
    /// </returns>
    private int GetTrackIndexById(Guid trackId)
    {
        if (Tracks.Count > 0)
        {
            return Tracks.FindIndex(t => t.Id == trackId);
        }
        else
        {
            return -1;
        }
    }

    private void SwitchRepeat()
    {
        Repeat = Repeat switch
        {
            RepeatMode.None => RepeatMode.Repeat,
            RepeatMode.Repeat => RepeatMode.RepeatOnce,
            _ => RepeatMode.None,
        };
    }

    private bool IsCollectionValid(ITrackStorable? collection)
    {
        if (collection is not null)
        {
            using (var db = new PlayerContext())
            {
                ITrackStorable? trackCollection = null;
                if (collection.Type == TrackCollectionType.Album)
                {
                    trackCollection = db.Albums.FirstOrDefault(a => a.Id == collection.Id);
                }
                else if (collection.Type == TrackCollectionType.Playlist)
                {
                    trackCollection = db.Playlists.FirstOrDefault(a => a.Id == collection.Id);
                }
                return trackCollection is not null;
            }
        }
        return false;
    }
}
