@inject NavigationService navigationService
@implements IDisposable

<header class="header">
    <div class="navigation-controls">
        <button class="button back-icon @(navigationService.CanNavigateBack ? "" : "inactive")"
                @onclick=@(e =>
                {
                    if (navigationService.CanNavigateBack) GoBack();
                })>
            <i class="ph ph-caret-left"></i>
        </button>

        <button class="button forward-icon @(navigationService.CanNavigateForward ? "" : "inactive")"
                @onclick=@(e =>
                {
                    if (navigationService.CanNavigateForward) GoForward();
                })>
            <i class="ph ph-caret-right"></i>
        </button>
    </div>

    <div class="other-controls">
        <button class="button download-icon">
            <i class="ph ph-arrow-circle-down"></i>
            Установить приложение
        </button>

        <button class="button notify-icon">
            <i class="ph ph-bell"></i>
        </button>

        <button class="button profile-icon">
            <i class="ph ph-user"></i>
        </button>
    </div>
</header>

@code {
    protected override void OnInitialized()
    {
        navigationService.LocationChanged += LocationChanged;
    }

    private void GoBack()
    {
        navigationService.NavigateBack();
    }

    private void GoForward()
    {
        navigationService.NavigateForward();
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        navigationService.LocationChanged -= LocationChanged;
    }
}
