@inject IPlayerService playerService;
@implements IDisposable

<div class="track-entry" tabindex="-1" @ondblclick="@StartTrack">
    <div class="track-number">
        <div class="track-number-index @(IsLoaded ? "loaded" : "")">
            @if (IsPlaying)
            {
                <img height="14" src="assets/gif/equa.gif">
            }
            else
            {
                @Index
            }
        </div>
        <div class="track-number-icon">
            <i class="fa-solid @(IsPlaying ? "fa-pause" : "fa-play")"
               @onclick="@(IsPlaying ? PauseTrack : StartTrack)">
            </i>
        </div>
    </div>
    <div class="album-cover-info">
        <div class="album-cover">
            @if (!String.IsNullOrEmpty(Track?.Album.Image))
            {
                <img src="data:image/png;base64,@Track.Album.Image">
            }
            else
            {
                <img src="data:image/png;base64,@AlbumCovers.DefaultCover" />
            }
        </div>
        <div class="album-info">
            <span class="title @(IsLoaded ? "loaded" : "")">@Track?.Title</span>
            <a class="artist" href="#">@Track?.Album.Artist.Name</a>
        </div>
    </div>
    <div class="album-name-link">
        <a href="#">@Track?.Album.Title</a>
    </div>
    <div class="track-duration-like-options">
        <div class="like-button">
            <i class="ph ph-heart-straight"></i>
        </div>
        <div class="track-duration">
            @Track?.DurationTime
        </div>
        <div class="options">
            <i class="ph-bold ph-dots-three"></i>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public Guid TrackId { get; set; }

    [Parameter]
    public ITrackStorable? Collection { get; set; }

    public bool IsPlaying { get; set; }

    public bool IsLoaded { get; set; }

    public TrackModel? Track { get; set; }

    protected override async Task OnInitializedAsync()
    {
        playerService.PlayStateChanged += OnPlayStateChanged;
        playerService.TrackChanged += OnTrackChanged;

        await InitializeTrackAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await InitializeTrackAsync();
    }

    private async Task InitializeTrackAsync()
    {
        using (var db = new PlayerContext())
        {
            Track = await db.Tracks
                 .Include(t => t.Album)
                     .ThenInclude(a => a.Artist)
                 .FirstOrDefaultAsync(t => t.Id == TrackId);
        }

        if (Collection?.Id == playerService.CurrentPlayingCollectionId
            && TrackId == playerService.CurrentPlayingTrackId)
        {
            IsLoaded = true;
            IsPlaying = playerService.IsPaused ? false : true;
        }
        else
        {
            IsPlaying = false;
            IsLoaded = false;
        }
        StateHasChanged();
    }

    public void StartTrack()
    {
        if (Collection is not null)
        {
            playerService.Start(Collection, TrackId);
        }
    }

    public void PauseTrack()
    {
        playerService.Pause();
    }

    public void OnPlayStateChanged(object? sender, PlayStateChangedEventArgs e)
    {
        if (Collection?.Id == e.CollectionId && TrackId == e.TrackId && !e.IsPaused)
        {
            IsPlaying = true;
        }
        else
        {
            IsPlaying = false;
        }
        StateHasChanged();
    }

    public void OnTrackChanged(object? sender, TrackChangedEventArgs e)
    {
        if (Collection?.Id == e.CollectionId && TrackId == e.TrackId)
        {
            IsLoaded = true;
        }
        else
        {
            IsLoaded = false;
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        playerService.PlayStateChanged -= OnPlayStateChanged;
        playerService.TrackChanged -= OnTrackChanged;
    }
}
