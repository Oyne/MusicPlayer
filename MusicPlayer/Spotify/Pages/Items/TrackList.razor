@using Spotify.Data.Images
@using Humanizer

<div class="page-wrapper">
    <div class="info-container">
        <div class="background"></div>
        <div class="info-area">
            <div class="cover">
                @if (!String.IsNullOrEmpty(TrackCollection?.Image))
                {
                    <img src="data:image/png;base64,@TrackCollection.Image">
                }
                else if (TrackCollection is AlbumModel)
                {
                    <img src="data:image/png;base64,@AlbumCovers.DefaultCover" />
                }
                else
                {
                    <img src="data:image/png;base64,@PlaylistImages.DefaultImage" />
                }
            </div>
            <div class="info">
                <div class="type">
                    @if (TrackCollection is AlbumModel)
                    {
                        <span>Album</span>

                    }
                    else if (TrackCollection is PlaylistModel)
                    {
                        <span>Playlist</span>

                    }
                </div>
                <div class="name-area">
                    <h1 class="name">@TrackCollection?.Title</h1>
                </div>
                <div class="authors">
                    @if (!String.IsNullOrEmpty(AuthorName))
                    {
                        <span>@AuthorName</span>
                    }
                </div>
                <div class="duration">
                    <div class="spotify-logo">
                        <i class="ph-fill ph-spotify-logo"></i>
                        <a href="https://open.spotify.com/user/spotify" target="_blank">Spotify</a>
                    </div>

                    <span class="dot-separator">•</span>

                    <span class="songs-count">
                        @($"{"song".ToQuantity(TrackCount, ShowQuantityAs.Numeric)},")
                        &nbsp;
                    </span>

                    @if (TotalDurationTime.Hours < 1)
                    {
                        <span class="songs-duration"> @TotalDurationTime.ToString("m' min 's' s'")</span>
                    }
                    else
                    {
                        <span class="songs-duration"> @TotalDurationTime.ToString("h' hr 'm' min'")</span>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="controls">
        <div class="controls-left">
            <button class="play-button">
                <i class="ph-fill ph-play-circle"></i>
            </button>
            <button class="like-button">
                <i class="ph ph-heart-straight"></i>
            </button>
            <button class="options-button">
                <i class="ph-fill ph-dots-three-outline"></i>
            </button>
        </div>
        <div class="controls-right">
            <button class="display-mode-button">
                <span>List</span>
                <i class="ph-fill ph-list-dashes"></i>
            </button>
        </div>
    </div>
    <div class="track-list-header">
        <div class="track-info">
            <div class="track-number">#</div>
            <div class="track-title">Title</div>
            <div class="track-album">Album</div>
            <div class="track-duration">
                <i class="ph ph-clock"></i>
            </div>
        </div>
    </div>
    <div class="track-list">
        @foreach (var track in Tracks)
        {
            <TrackRow Index="songNumber" Id=@track.Id></TrackRow>
            songNumber++;
        }
    </div>
</div>

@code {
    [Parameter]
    public ITrackStorable? TrackCollection { get; set; }

    public List<TrackModel> Tracks { get; set; } = new();

    public string? AuthorName { get; set; }

    public TimeSpan TotalDurationTime
    {
        get => TimeSpan.FromSeconds(Tracks.Sum(t => t.Duration));
    }

    public int TrackCount
    {
        get => Tracks.Count();
    }

    int songNumber;

    protected override void OnInitialized()
    {
        InitializeTrackList();
    }

    protected override void OnParametersSet()
    {
        InitializeTrackList();
    }

    private void InitializeTrackList()
    {
        if (TrackCollection is not null)
        {
            songNumber = 1;
            using (var db = new PlayerContext())
            {
                if (TrackCollection is AlbumModel)
                {

                    TrackCollection = db.Albums
                                .Include(a => a.Artist)
                                .Include(a => a.Tracks)
                                .FirstOrDefault(a => a.Id == TrackCollection.Id);

                    if (TrackCollection is not null)
                    {
                        Tracks = ((AlbumModel)TrackCollection).Tracks;
                        AuthorName = ((AlbumModel)TrackCollection).Artist.Name;
                    }
                }
                else if (TrackCollection is PlaylistModel)
                {
                    TrackCollection = db.Playlists
                                .Include(p => p.User)
                                .Include(p => p.PlaylistTrack)
                                    .ThenInclude(pt => pt.Track)
                                .FirstOrDefault(p => p.Id == TrackCollection.Id);

                    if (TrackCollection is not null)
                    {
                        Tracks = (from t in db.Tracks
                                  from pt in db.PlaylistTracks
                                  where t.Id == pt.TrackId
                                  where pt.PlaylistId == TrackCollection.Id
                                  select t).ToList();

                        AuthorName = ((PlaylistModel)TrackCollection).User.Name;
                    }
                }
            }
        }
    }
}