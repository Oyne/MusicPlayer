@using Humanizer
@using Spotify.Services
@inject IPlayerService playerService;
@implements IDisposable

<div class="page-wrapper">
    <div class="info-container">
        <div class="background"></div>
        <div class="info-area">
            <div class="cover">
                @if (!String.IsNullOrEmpty(TrackCollection?.Image))
                {
                    <img src="data:image/png;base64,@TrackCollection.Image">
                }
                else if (TrackCollection is AlbumModel)
                {
                    <img src="data:image/png;base64,@AlbumCovers.DefaultCover" />
                }
                else
                {
                    <img src="data:image/png;base64,@PlaylistImages.DefaultImage" />
                }
            </div>
            <div class="info">
                <div class="type">
                    @if (TrackCollection is AlbumModel)
                    {
                        @("Album")
                    }
                    else if (TrackCollection is PlaylistModel)
                    {
                        @("Playlist")

                    }
                </div>
                <div class="name-area">
                    <h1 class="name">@TrackCollection?.Title</h1>
                </div>
                <div class="authors">
                    @if (!String.IsNullOrEmpty(AuthorName))
                    {
                        @($"{AuthorName}")
                    }
                </div>
                <div class="duration">
                    <div class="spotify-logo">
                        <i class="ph-fill ph-spotify-logo"></i>
                        <a href="https://open.spotify.com/user/spotify" target="_blank">Spotify</a>
                    </div>

                    <span class="dot-separator">•</span>

                    <span class="songs-count">
                        @($"{"song".ToQuantity(TrackCount, ShowQuantityAs.Numeric)},")
                        &nbsp;
                    </span>

                    @if (TotalDurationTime.Hours < 1)
                    {
                        <span class="songs-duration"> @TotalDurationTime.ToString("m' min 's' s'")</span>
                    }
                    else
                    {
                        <span class="songs-duration"> @TotalDurationTime.ToString("h' hr 'm' min'")</span>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="controls">
        <div class="controls-left">
            @if (IsPlaying)
            {
                <button class="play-button" @onclick="Pause">
                    <i class="ph-fill ph-pause-circle"></i>
                </button>
            }
            else
            {
                <button class="play-button" @onclick="StartCollection">
                    <i class="ph-fill ph-play-circle"></i>
                </button>
            }
            <button class="like-button">
                <i class="ph ph-heart-straight"></i>
            </button>
            <button class="options-button">
                <i class="ph-fill ph-dots-three-outline"></i>
            </button>
        </div>
        <div class="controls-right">
            <button class="display-mode-button">
                <span>List</span>
                <i class="ph-fill ph-list-dashes"></i>
            </button>
        </div>
    </div>
    <div class="track-list-header">
        <div class="track-info">
            <div class="track-number">#</div>
            <div class="track-title">Title</div>
            <div class="track-album">Album</div>
            <div class="track-duration">
                <i class="ph ph-clock"></i>
            </div>
        </div>
    </div>
    <div class="track-list">
        @{
            songNumber = 1;
        }
        @foreach (var track in Tracks)
        {
            <TrackRow Index="songNumber" TrackId="@track.Id" Collection="@TrackCollection"></TrackRow>
            songNumber++;
        }
    </div>
</div>

@code {
    int songNumber;

    [Parameter]
    public ITrackStorable? TrackCollection { get; set; }

    Guid CollectionId { get; set; }

    List<TrackModel> Tracks { get; set; } = new();

    string? AuthorName { get; set; }

    bool IsPlaying { get; set; }

    public TimeSpan TotalDurationTime
    {
        get => TimeSpan.FromSeconds(Tracks.Sum(t => t.Duration));
    }

    public int TrackCount
    {
        get => Tracks.Count();
    }

    protected override void OnInitialized()
    {
        InitializeTrackList();

        playerService.PlayStateChanged += OnPlayStateChanged;
    }

    protected override void OnParametersSet()
    {
        InitializeTrackList();
    }

    private void InitializeTrackList()
    {
        if (TrackCollection is not null)
        {
            CollectionId = TrackCollection.Id;
            if (TrackCollection.Type == TrackCollectionType.Album)
            {
                InitializeAlbum();
            }
            else if (TrackCollection.Type == TrackCollectionType.Playlist)
            {
                InitializePlaylist();
            }
        }

        if (CollectionId == playerService.CurrentPlayingCollectionId
            && !playerService.IsPaused)
        {
            IsPlaying = true;
        }
        else
        {
            IsPlaying = false;
        }
        StateHasChanged();
    }

    private void InitializeAlbum()
    {
        if (TrackCollection is not null)
        {
            using (var db = new PlayerContext())
            {
                TrackCollection = db.Albums
                                       .Include(a => a.Artist)
                                       .Include(a => a.Tracks)
                                       .FirstOrDefault(a => a.Id == TrackCollection.Id);

                if (TrackCollection is not null)
                {
                    Tracks = ((AlbumModel)TrackCollection).Tracks;
                    AuthorName = ((AlbumModel)TrackCollection).Artist.Name;
                }
            }
        }
    }

    private void InitializePlaylist()
    {
        if (TrackCollection is not null)
        {
            using (var db = new PlayerContext())
            {
                TrackCollection = db.Playlists
                                .Include(p => p.User)
                                .Include(p => p.PlaylistTrack)
                                    .ThenInclude(pt => pt.Track)
                                .FirstOrDefault(p => p.Id == TrackCollection.Id);

                if (TrackCollection is not null)
                {
                    Tracks = (from t in db.Tracks
                              from pt in db.PlaylistTracks
                              where t.Id == pt.TrackId
                              where pt.PlaylistId == TrackCollection.Id
                              select t).ToList();

                    AuthorName = ((PlaylistModel)TrackCollection).User.Name;
                }
            }
        }
    }

    public void StartCollection()
    {
        if (TrackCollection is not null)
        {
            playerService.Start(TrackCollection);
        }
    }

    public void Pause()
    {
        playerService.Pause();
    }

    public void OnPlayStateChanged(object sender, PlayStateChangedEventArgs e)
    {
        if (CollectionId == e.CollectionId && !e.IsPaused)
        {
            IsPlaying = true;
        }
        else
        {
            IsPlaying = false;
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        playerService.PlayStateChanged -= OnPlayStateChanged;
    }
}