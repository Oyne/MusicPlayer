@inject IJSRuntime js
@inject NavigationManager navigation
@inject IPlayerService playerService
@implements IDisposable

<div @ref=Card class="card" @onclick="OpenPage">
    <div class="image-area">
        <div class="image">
            @if (!String.IsNullOrEmpty(TrackCollection?.Image))
            {
                <img src="data:image/png;base64,@TrackCollection.Image" />
            }
            else if (TrackCollection?.Type == TrackCollectionType.Album)
            {
                <img src="data:image/png;base64,@AlbumCovers.DefaultCover" />
            }
            else
            {
                <img src="data:image/png;base64,@PlaylistImages.DefaultImage" />
            }

            <button class="play-button" @onclick="@(IsPlaying ? Pause : StartCollection)" @onclick:stopPropagation="true">
                <i class="ph-fill @(IsPlaying ? "ph-pause-circle" : "ph-play-circle")"></i>
            </button>
        </div>
    </div>
    <div class="description-area">
        <div class="title-area">
            <a class="title" href="#">@TrackCollection?.Title</a>
        </div>
        <div class="author-area">
            @if (TrackCollection?.Type == TrackCollectionType.Album)
            {
                <a class="author" href="#">@AuthorName</a>
            }
            else
            {
                @AuthorName
            }
        </div>
    </div>
</div>

@code {
    IJSObjectReference? jsModule;
    ElementReference Card;

    [Parameter]
    public ITrackStorable? TrackCollection { get; set; }

    public string? AuthorName { get; set; }

    Guid CollectionId { get; set; }

    bool IsPlaying { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitializeTrackList();

        playerService.PlayStateChanged += OnPlayStateChanged;
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await js.InvokeAsync<IJSObjectReference>("import", "./Pages/Items/TrackCollectionCard.razor.js");
            await jsModule.InvokeVoidAsync("TrackCollectionCard.InitHover", Card);
        }
    }

    private void OpenPage()
    {
        string path = TrackCollection is AlbumModel ? "album" : "playlist";
        navigation.NavigateTo($"/{path}/{TrackCollection?.Id}");
    }

    public void StartCollection()
    {
        if (TrackCollection is not null)
        {
            playerService.Start(TrackCollection);
        }
    }

    public void Pause()
    {
        playerService.Pause();
    }

    private async Task InitializeTrackList()
    {
        if (TrackCollection is not null)
        {
            if (TrackCollection.Id == Guid.Empty)
            {
                return;
            }

            CollectionId = TrackCollection.Id;
            if (TrackCollection.Type == TrackCollectionType.Album)
            {
                await InitializeAlbum();
            }
            else if (TrackCollection.Type == TrackCollectionType.Playlist)
            {
                await InitializePlaylist();
            }
        }

        if (CollectionId == playerService.CurrentPlayingCollectionId && !playerService.IsPaused)
        {
            IsPlaying = true;
        }
        else
        {
            IsPlaying = false;
        }
        StateHasChanged();
    }

    private async Task InitializeAlbum()
    {
        if (TrackCollection is not null)
        {
            using (var db = new PlayerContext())
            {
                var temp = await db.Albums.Include(a => a.Artist)
                                    .FirstOrDefaultAsync(a => a.Id == TrackCollection.Id);

                if (temp is not null)
                {
                    AuthorName = ((AlbumModel)temp).Artist.Name;
                }
            }
        }
    }

    private async Task InitializePlaylist()
    {
        if (TrackCollection is not null)
        {
            using (var db = new PlayerContext())
            {
                var temp = await db.Playlists
                                .Include(p => p.User)
                                .FirstOrDefaultAsync(p => p.Id == TrackCollection.Id);

                if (temp is not null)
                {
                    AuthorName = ((PlaylistModel)temp).User.Name;
                }
            }
        }
    }

    public void OnPlayStateChanged(object sender, PlayStateChangedEventArgs e)
    {
        if (CollectionId == e.CollectionId && !e.IsPaused)
        {
            IsPlaying = true;
        }
        else
        {
            IsPlaying = false;
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        playerService.PlayStateChanged -= OnPlayStateChanged;
    }
}
