@inject IJSRuntime js
@inject NavigationManager navigation
@using Spotify.Data.Images

<div @ref=Card class="card" @onclick="OpenPage">
    <div class="image-area">
        <div class="image">
            @if (!String.IsNullOrEmpty(TrackCollection?.Image))
            {
                <img src="data:image/png;base64,@TrackCollection.Image" />
            }
            else if (TrackCollection is AlbumModel)
            {
                <img src="data:image/png;base64,@AlbumCovers.DefaultCover" />
            }
            else if (TrackCollection is PlaylistModel)
            {
                <img src="data:image/png;base64,@PlaylistImages.DefaultImage" />
            }
            <div class="play-button">
                <i class="fa-solid fa-play"></i>
            </div>
        </div>
    </div>
    <div class="description-area">
        <a class="title" href="#">@TrackCollection?.Title</a>
        <div class="author-area">
            @if (TrackCollection is AlbumModel album)
            {
                <sapn>album.Artist.Name</sapn>
            }
            else if (TrackCollection is PlaylistModel playlist)
            {
                <sapn>playlist.User.Name</sapn>
            }
        </div>
    </div>
</div>

@code {
    IJSObjectReference? jsModule;
    ElementReference Card;

    [Parameter]
    public ITrackStorable? TrackCollection { get; set; }

    protected override void OnInitialized()
    {
        using (var db = new PlayerContext())
        {
            if (TrackCollection is PlaylistModel)
            {
                TrackCollection = db.Playlists
                        .Include(p => p.User)
                        .Include(p => p.PlaylistTrack)
                            .ThenInclude(pt => pt.Track)
                        .FirstOrDefault(p => p.Id == TrackCollection.Id);
            }
            else if (TrackCollection is AlbumModel)
            {
                TrackCollection = db.Albums
                       .Include(a => a.Artist)
                       .Include(a => a.Tracks)
                       .FirstOrDefault(a => a.Id == TrackCollection.Id);
            }
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await js.InvokeAsync<IJSObjectReference>("import", "./Pages/Items/TrackCollectionCard.razor.js");
            await jsModule.InvokeVoidAsync("TrackCollectionCard.InitHover", Card);
        }
    }

    private void OpenPage()
    {
        string path = TrackCollection is AlbumModel ? "album" : "playlist";
        navigation.NavigateTo($"/{path}/{TrackCollection?.Id}");
    }
}
